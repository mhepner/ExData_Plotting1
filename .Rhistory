install.packages("devtools")
library(devtools)
find_rtools()
install.packages("KernSmooth")
licence()
licence(KernSmooth)
licence("KernSmooth")
library(KernSmooth)
dir
library(swirl)
swirl()
TRUE==TRUE
(FALSE==TRUE)==FALSE
6==7
6<7
10<=10
5!=7
5!=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5>8 || 6!=8 && 4>3.9
isTRUE(6>4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <-sample(10)
ints
ints > 5
which(ints>7)
any(ints<0)
all(ints>0)
Sys.Date()
mean(c(2, 4, 5))
submit()
boring_function('My first function!')
boring_function()
boring_function
submit()
submit()
my_mean(2, 3, 6)
length(my_vector)
length(2,3,6)
submit()
my_mean(2, 3, 6)
my_mean(c(2, 3, 6))
submit()
my_mean(c(4, 5, 10))
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+3}, 9)
evaluate(function(x){1}, 9)
evaluate(function(x){x+1}, 6)
evaluate(function(x){x+1})
evaluate(function(x){x}, c(8, 4, 0))
evaluate(function(x), c(8, 4, 0))
info()
evaluate(function(x), c(8, 4, 0))
evaluate(function(x){x+1}, c(8, 4, 0))
evaluate(function(x){x[1]}, c(8, 4, 0))
evaluate(function(x){x[3]}, c(8, 4, 0))
evaluate(function(x){x[length(x)]}, c(8, 4, 0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("Mike", "Hi")
submit()
mad_libs("Coatesville" = place, "Black" = students, "Whitey" = noun)
mad_libs(place = "A", adjective = "B", noun = "C")
submit()
'Good'%p% 'job!'
submit()
"I" %p% "love" %p% "R!"
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <-as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(, t1, units = 'days'))
difftime(Sys.time(), t1, units = 'days')
library(mtcars)
library(datasets)
data("mtcars")
? mtcars
mtcars
library(datasets)
data("mtcars")
let avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
let avg8cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "8") |> Seq.averageBy (fun x -> x?hp.AsFloat())
abs(avg4cyl - avg8cyl)
let avg4cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "4") |> Seq.averageBy (fun x -> x?hp.AsFloat())
let avg8cyl = mtcars.Data |> Seq.filter (fun x -> x?cyl = "8") |> Seq.averageBy (fun x -> x?hp.AsFloat())
abs(avg4cyl - avg8cyl)
set.seed(1)
rpois(5,2)
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips<- sample(c(0,1), 100 replace = TRUE, prob = c(0.3, 0.7))
flips<- sample(c(0,1), 100, replace = TRUE, prob = c(0.3, 0.7))
flips
sum(flips)
? rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(, size = 100, prob = 0.7)
flips2 <- rbinom(0, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
? rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5)
rpois(5, mean = 10)
rpois(5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
data("cars")
data(cars)
? cars
head(cars)
plot(cars)
? plot
plot(x = cars%speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = Speed, y = cars$dist)
plot(x = cars$Speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist, Speed)
plot(x = cars$speed, y = cars$dist, xlabel = Speed)
plot(y = cars$speed, x = cars$dist)
plot(y = cars$speed, x = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(main = "My Plot")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
plot(cars, sub = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, cols = 2)
plot(cars, col = 2)
plot(cars, xlim = c(10,15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
? boxplot
boxplot(mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
quit
quit()
library(swirl)
install_from_swirl("Getting and Cleaning Data")
swirl()
swirl()
library(swirl)
swirl()
mydef -> read.csv(path2csv, stringsAsFactors = FALSE)
mydef <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
package_version("dplyr")
packageversion("dplyr")
package_version(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
-5:20
-(-5:20)
-(5:20)
select(cran, -(x:size))
cran
select(cran, -(x:size))
select(cran, -(X:size))
filter(cran,package=="swirl")
filter(cran, r_version =="3.1.1", country =="US")
?Comparison
filter(cran, r_version <="3.0.2", country =="IN")
filter(cran, country == "US" | country =="IN")
filter(cran, size > 100500,  r_os == "linux-gnu")
is.na(c(3, 5, NA, 10))
! is.na(c(3, 5, NA, 10))
filter(Cran, !is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size, ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(ip_id, package, size)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = size_mb / 2^10)
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
submit()
submit()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(packsum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View
View()
View(top_counts)
top_counts_sorted <- arrange(top_counts, count)
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
view(top_unique)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique())
)
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
?mutate
submit()
submit()
submit()
quit()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
gather(students2, sex, count, -grade)
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(data = res, col = sex_class, into = c("sex", "class"))
submit()
submit()
submit()
submit()
students3
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?gather
submit()
submit()
submit()
students3
submit()
submit()
submit()
reset()
swirl()
reset()
swirl()
submit()
submit()
submit()
submit()
students3
submit()
submit()
submit()
submit()
submit()
?spread
submit()
submit()
extract_numeric("class5")
submit()
?mutate
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
extract_numeric("class5")
extract_numeric("class5")
submit()
submit()
reset()
swirl()
submit()
submit()
submit()
submit()
submit()
submit()
students4
? select
submit()
submit()
submit()
submit()
submit()
submit()
submit()
?unique
submit()
submit()
submit()
submit()
submit()
submit()
passed
failes
failed
mutate(passed, status = "passed")
passed <- passed %>% mutate(status = "passed")
failed <- failed %>% mutate(status = "failed")
?bind_rows
bind_rows(class)
bind_rows(passed, failed)
sat
submit()
submit()
?separate
submit()
submit()
submit()
0
quit
setwd("~/ExploratoryDataAnalysis/ExData_Plotting1")
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot1.R')
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot2.R')
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot3.R')
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot3.R')
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot3.R')
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot3.R')
source('~/ExploratoryDataAnalysis/ExData_Plotting1/plot4.R')
